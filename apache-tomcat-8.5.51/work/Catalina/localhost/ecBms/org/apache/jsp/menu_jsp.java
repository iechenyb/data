/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2020-04-09 09:20:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class menu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<title> ZTREE DEMO - Standard Data </title>\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"css/demo.css\" type=\"text/css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"css/zTreeStyle.css\" type=\"text/css\">\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"js/jquery-1.11.2.min.js\"></script>  \r\n");
      out.write("\t<script type=\"text/javascript\" src=\"js/jquery.ztree.core-3.5.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"js/common.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar setting = {\r\n");
      out.write("\t\t\tview: {\r\n");
      out.write("\t\t\t\tselectedMulti: false\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tdata: {\r\n");
      out.write("\t\t\t\tsimpleData: {\r\n");
      out.write("\t\t\t\t\tenable: true\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcallback: {\r\n");
      out.write("\t\t\t\tbeforeClick: beforeClick,\r\n");
      out.write("\t\t\t\tbeforeCollapse: beforeCollapse,\r\n");
      out.write("\t\t\t\tbeforeExpand: beforeExpand,\r\n");
      out.write("\t\t\t\tonCollapse: onCollapse,\r\n");
      out.write("\t\t\t\tonExpand: onExpand\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\tvar log, className = \"dark\";\r\n");
      out.write("\t\tfunction beforeClick(treeId, treeNode) {\r\n");
      out.write("\t\t\tif (treeNode.isParent) {\r\n");
      out.write("\t\t\t\treturn true;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tvar pm_url = new PostManager('pageAction/resUrl');\r\n");
      out.write("\t\t\t\tvar params = {'id' : treeNode.id};\r\n");
      out.write("\t\t\t\tpm_url.post(params).complete = function(data) {\r\n");
      out.write("\t\t\t\t\tparent.rightFrame.location.href = data.url;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction beforeCollapse(treeId, treeNode) {\r\n");
      out.write("\t\t\tclassName = (className === \"dark\" ? \"\":\"dark\");\r\n");
      out.write("\t\t\tshowLog(\"[ \"+getTime()+\" beforeCollapse ]&nbsp;&nbsp;&nbsp;&nbsp;\" + treeNode.name );\r\n");
      out.write("\t\t\treturn (treeNode.collapse !== false);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction onCollapse(event, treeId, treeNode) {\r\n");
      out.write("\t\t\tshowLog(\"[ \"+getTime()+\" onCollapse ]&nbsp;&nbsp;&nbsp;&nbsp;\" + treeNode.name);\r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("\t\tfunction beforeExpand(treeId, treeNode) {\r\n");
      out.write("\t\t\tclassName = (className === \"dark\" ? \"\":\"dark\");\r\n");
      out.write("\t\t\tshowLog(\"[ \"+getTime()+\" beforeExpand ]&nbsp;&nbsp;&nbsp;&nbsp;\" + treeNode.name );\r\n");
      out.write("\t\t\treturn (treeNode.expand !== false);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction onExpand(event, treeId, treeNode) {\r\n");
      out.write("\t\t\tshowLog(\"[ \"+getTime()+\" onExpand ]&nbsp;&nbsp;&nbsp;&nbsp;\" + treeNode.name);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction showLog(str) {\r\n");
      out.write("\t\t\tif (!log) log = $(\"#log\");\r\n");
      out.write("\t\t\tlog.append(\"<li class='\"+className+\"'>\"+str+\"</li>\");\r\n");
      out.write("\t\t\tif(log.children(\"li\").length > 8) {\r\n");
      out.write("\t\t\t\tlog.get(0).removeChild(log.children(\"li\")[0]);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction getTime() {\r\n");
      out.write("\t\t\tvar now= new Date(),\r\n");
      out.write("\t\t\th=now.getHours(),\r\n");
      out.write("\t\t\tm=now.getMinutes(),\r\n");
      out.write("\t\t\ts=now.getSeconds(),\r\n");
      out.write("\t\t\tms=now.getMilliseconds();\r\n");
      out.write("\t\t\treturn (h+\":\"+m+\":\"+s+ \" \" +ms);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction expandNode(e) {\r\n");
      out.write("\t\t\tvar zTree = $.fn.zTree.getZTreeObj(\"treeDemo\"),\r\n");
      out.write("\t\t\ttype = e.data.type,\r\n");
      out.write("\t\t\tnodes = zTree.getSelectedNodes();\r\n");
      out.write("\t\t\tif (type.indexOf(\"All\")<0 && nodes.length == 0) {\r\n");
      out.write("\t\t\t\talert(\"请先选择一个父节点\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (type == \"expandAll\") {\r\n");
      out.write("\t\t\t\tzTree.expandAll(true);\r\n");
      out.write("\t\t\t} else if (type == \"collapseAll\") {\r\n");
      out.write("\t\t\t\tzTree.expandAll(false);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tvar callbackFlag = $(\"#callbackTrigger\").attr(\"checked\");\r\n");
      out.write("\t\t\t\tfor (var i=0, l=nodes.length; i<l; i++) {\r\n");
      out.write("\t\t\t\t\tzTree.setting.view.fontCss = {};\r\n");
      out.write("\t\t\t\t\tif (type == \"expand\") {\r\n");
      out.write("\t\t\t\t\t\tzTree.expandNode(nodes[i], true, null, null, callbackFlag);\r\n");
      out.write("\t\t\t\t\t} else if (type == \"collapse\") {\r\n");
      out.write("\t\t\t\t\t\tzTree.expandNode(nodes[i], false, null, null, callbackFlag);\r\n");
      out.write("\t\t\t\t\t} else if (type == \"toggle\") {\r\n");
      out.write("\t\t\t\t\t\tzTree.expandNode(nodes[i], null, null, null, callbackFlag);\r\n");
      out.write("\t\t\t\t\t} else if (type == \"expandSon\") {\r\n");
      out.write("\t\t\t\t\t\tzTree.expandNode(nodes[i], true, true, null, callbackFlag);\r\n");
      out.write("\t\t\t\t\t} else if (type == \"collapseSon\") {\r\n");
      out.write("\t\t\t\t\t\tzTree.expandNode(nodes[i], false, true, null, callbackFlag);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\tvar pm_m = new PostManager('employeeAction/listMenu');\r\n");
      out.write("\t\t\tpm_m.post().complete = function(data) {\r\n");
      out.write("\t\t\t\tvar zNodes  =[];\r\n");
      out.write("\t\t\t\t$.each(data,function(){\r\n");
      out.write("\t\t\t\t\tvar node = {\r\n");
      out.write("\t\t\t\t\t\tid : this.id,\r\n");
      out.write("\t\t\t\t\t\tname : this.functionName,\r\n");
      out.write("\t\t\t\t\t\tpid : this.pid\r\n");
      out.write("\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\tzNodes.push(node);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t$.fn.zTree.init($(\"#treeDemo\"), setting, zNodes);\r\n");
      out.write("\t\t\t\t$(\"#expandBtn\").bind(\"click\", {type:\"expand\"}, expandNode);\r\n");
      out.write("\t\t\t\t$(\"#collapseBtn\").bind(\"click\", {type:\"collapse\"}, expandNode);\r\n");
      out.write("\t\t\t\t$(\"#toggleBtn\").bind(\"click\", {type:\"toggle\"}, expandNode);\r\n");
      out.write("\t\t\t\t$(\"#expandSonBtn\").bind(\"click\", {type:\"expandSon\"}, expandNode);\r\n");
      out.write("\t\t\t\t$(\"#collapseSonBtn\").bind(\"click\", {type:\"collapseSon\"}, expandNode);\r\n");
      out.write("\t\t\t\t$(\"#expandAllBtn\").bind(\"click\", {type:\"expandAll\"}, expandNode);\r\n");
      out.write("\t\t\t\t$(\"#collapseAllBtn\").bind(\"click\", {type:\"collapseAll\"}, expandNode);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"content_wrap\">\r\n");
      out.write("\t<div class=\"zTreeDemoBackground left\">\r\n");
      out.write("\t\t<ul id=\"treeDemo\" class=\"ztree\"></ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
